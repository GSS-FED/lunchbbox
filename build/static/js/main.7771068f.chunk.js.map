{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["Airtable","configure","endpointUrl","apiKey","base","App","_React$useState","React","useState","_React$useState2","Object","slicedToArray","member","setMember","_React$useState3","_React$useState4","rest","setRest","_React$useState5","_React$useState6","wantToGo","setWantToGo","_React$useState7","_React$useState8","canGoRest","setCanGoRest","_React$useState9","_React$useState10","gogogo","setGogogo","useEffect","select","fields","firstPage","err","records","console","log","map","r","id","name","get","avatar","noLike","length","randomResult","sort","a","b","Math","random","react_default","createElement","style","margin","width","display","fontSize","m","key","marginBottom","htmlFor","marginRight","alt","src","thumbnails","large","url","type","value","onChange","includes","wantGo","toConsumableArray","index","indexOf","splice","state","concat","checked","marginTop","height","onClick","filterRest","filter","item","undefined","noLikePeople","verticalAlign","gogo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7771068f.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Airtable from \"airtable\";\nimport \"./App.css\";\n\nAirtable.configure({\n  endpointUrl: \"https://api.airtable.com\",\n  apiKey: \"keyv7sHqzJx3CNjUp\"\n});\nconst base = Airtable.base(\"appbBH2HPUYrrBv1u\");\n\nfunction App() {\n  const [member, setMember] = React.useState([]);\n  const [rest, setRest] = React.useState([]);\n  const [wantToGo, setWantToGo] = React.useState([]);\n  const [canGoRest, setCanGoRest] = React.useState([]);\n  const [gogogo, setGogogo] = React.useState([]);\n\n  React.useEffect(() => {\n    base(\"中餐好朋友\")\n      .select({\n        fields: [\"成員\", \"頭像\"]\n      })\n      .firstPage((err, records) => {\n        console.log(records);\n        setMember(\n          records.map(r => ({\n            id: r.id,\n            name: r.get(\"成員\"),\n            avatar: r.get(\"頭像\")\n          }))\n        );\n      });\n\n    base(\"中午好餐廳\")\n      .select({\n        fields: [\"餐廳\", \"不是那麼愛這間的人\"]\n      })\n      .firstPage((err, records) => {\n        setRest(\n          records.map(r => ({\n            id: r.id,\n            name: r.get(\"餐廳\"),\n            noLike: r.get(\"不是那麼愛這間的人\")\n          }))\n        );\n      });\n  }, []);\n\n  React.useEffect(() => {\n    if (canGoRest.length > 0) {\n      const randomResult = canGoRest.sort((a, b) => {\n        var num = Math.random() > 0.5 ? -1 : 1;\n        return num;\n      });\n      setGogogo([randomResult[0], randomResult[1], randomResult[2]]);\n    }\n  }, [canGoRest]);\n\n  return (\n    <div style={{ margin: \"30px\" }}>\n      <div style={{ width: \"40%\", display: \"inline-block\" }}>\n        <div style={{ fontSize: \"30px\" }}>請選擇要去吃飯的人</div>\n        {member.map(m => (\n          <div\n            key={m.id}\n            style={{\n              fontSize: \"20px\",\n              marginBottom: \"2px\",\n              width: \"100px\",\n              display: \"inline-block\"\n            }}\n          >\n            <label htmlFor={m.id}>\n              {\" \"}\n              <img\n                style={{ width: \"80px\", marginRight: \"10px\" }}\n                alt={m.name}\n                src={m.avatar[0].thumbnails.large.url}\n              />\n              <div >\n                <input\n                  type=\"checkbox\"\n                  value={m.id}\n                  id={m.id}\n                  onChange={() => {\n                    if (!wantToGo.includes(m.id))\n                      setWantToGo(state => [...state, m.id]);\n                    else {\n                      const wantGo = [...wantToGo];\n                      const index = wantGo.indexOf(m.id);\n                      if (index > -1) {\n                        wantGo.splice(index, 1);\n                      }\n                      setWantToGo(wantGo);\n                    }\n                  }}\n                  checked={wantToGo.includes(m.id)}\n                />\n                {m.name}\n              </div>\n            </label>\n          </div>\n        ))}\n\n        <button\n          style={{\n            marginTop: \"10px\",\n            width: \"100px\",\n            height: \"40px\",\n            fontSize: \"24px\"\n          }}\n          onClick={() => {\n            const filterRest = [...rest].filter(item => {\n              return (\n                item.noLike === undefined ||\n                item.noLike.filter(\n                  noLikePeople => wantToGo.indexOf(noLikePeople) > -1\n                ).length === 0\n              );\n            });\n            setCanGoRest(filterRest);\n          }}\n        >\n          篩選\n        </button>\n      </div>\n      <div\n        style={{ width: \"40%\", display: \"inline-block\", verticalAlign: \"top\" }}\n      >\n        <span style={{ fontSize: \"30px\" }}>快去這邊吃飯</span>\n        {!!gogogo && gogogo.map(gogo => <div key={gogo.id}>{gogo.name}</div>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}